# -*- coding: utf-8 -*-
"""customer .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xACi0KSM-lIf_mTC_wUCvDPasFTV8HuP
"""

import sys
print(sys.version)

# Imports
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, classification_report, confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from xgboost import XGBClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix
from imblearn.over_sampling import SMOTE
import joblib
import warnings
warnings.filterwarnings("ignore")

# Load Dataset
df = pd.read_csv("WA_Fn-UseC_-Telco-Customer-Churn.csv")
print(df.isnull().sum())
df.drop('customerID', axis=1, inplace=True)
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
df['TotalCharges'].fillna(df['TotalCharges'].median(), inplace=True)

#  Encode Target
df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})

#  Binary Encoding
binary_cols = ['Partner', 'Dependents', 'PhoneService', 'PaperlessBilling']
for col in binary_cols:
    df[col] = df[col].map({'Yes': 1, 'No': 0})
df.replace(['No internet service', 'No phone service'], 'No', inplace=True)

# One-Hot Encoding
df = pd.get_dummies(df, drop_first=True)

# Feature Scaling
scaler = StandardScaler()
num_cols = ['tenure', 'MonthlyCharges', 'TotalCharges']
df[num_cols] = scaler.fit_transform(df[num_cols])

# Exploratory Data Analysis (EDA)
sns.countplot(x='Churn', data=df)
plt.title("Churn Distribution")
plt.show()

sns.boxplot(x='Churn', y='MonthlyCharges', data=df)
plt.title("Monthly Charges vs Churn")
plt.show()

sns.heatmap(df.corr(), cmap='coolwarm', annot=False)
plt.title("Feature Correlation Heatmap")
plt.show()

# Prepare Features
X = df.drop('Churn', axis=1)
y = df['Churn']
joblib.dump(X.columns.tolist(), "train_columns.pkl")

#  Handle Class Imbalance
X_res, y_res = SMOTE(random_state=42).fit_resample(X, y)

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.2, random_state=42)

# Logistic Regression
lr_model = LogisticRegression(max_iter=1000)
lr_model.fit(X_train, y_train)
y_pred_lr = lr_model.predict(X_test)

print("=== Logistic Regression Report ===")
print(classification_report(y_test, y_pred_lr))
sns.heatmap(confusion_matrix(y_test, y_pred_lr), annot=True, fmt='d')
plt.title("Logistic Regression Confusion Matrix")
plt.show()
joblib.dump(lr_model, "logistic_model.pkl")

from sklearn.model_selection import RandomizedSearchCV

param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [3, 5, 8, 10],
    'learning_rate': [0.01, 0.1, 0.2],
    'subsample': [0.7, 0.8, 1],
    'colsample_bytree': [0.7, 0.8, 1],
}

xgb = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)
random_search = RandomizedSearchCV(xgb, param_distributions=param_grid, n_iter=20, cv=3, scoring='f1', n_jobs=-1)
random_search.fit(X_train, y_train)

xgb_model = random_search.best_estimator_
y_pred_ = xgb_model.predict(X_test)

print(classification_report(y_test, y_pred_))
sns.heatmap(confusion_matrix(y_test, y_pred_), annot=True, fmt='d', cmap='Greens')
plt.title("XGBoost Confusion Matrix")
plt.show()
joblib.dump(xgb_model, "xgb_model.pkl")

# Train Random Forest Classifier
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
param_dist = {
    'n_estimators': [100, 200, 500],
    'max_depth': [10, 20, 30, None],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'max_features': ['sqrt', 'log2'],
    'bootstrap': [True, False]
}
rf_search = RandomizedSearchCV(rf_model, param_distributions=param_dist, n_iter=30, cv=3, scoring='accuracy', n_jobs=-1, random_state=42)
rf_search.fit(X_train, y_train)
rf = rf_search.best_estimator_
y_pred_rf = rf.predict(X_test)

# Evaluate Random Forest
print("=== Random Forest Classification Report ===")
print(classification_report(y_test, y_pred_rf))
sns.heatmap(confusion_matrix(y_test, y_pred_rf), annot=True, fmt='d', cmap='Blues')
plt.title("Random Forest Confusion Matrix")
plt.show()

# Save the model
joblib.dump(rf, "rf_model.pkl")

#model evaluation

def evaluate_model(name, y_true, y_pred):
    acc = accuracy_score(y_true, y_pred)
    prec = precision_score(y_true, y_pred)
    rec = recall_score(y_true, y_pred)
    f1 = f1_score(y_true, y_pred)
    print(f"{name} Metrics:")
    print(f"Accuracy : {acc:.4f}")
    print(f"Precision: {prec:.4f}")
    print(f"Recall   : {rec:.4f}")
    print(f"F1-Score : {f1:.4f}")
    print("-" * 40)

print("\n=== Model Performance Summary ===\n")
evaluate_model("Logistic Regression", y_test, y_pred_lr)
evaluate_model("XGBoost", y_test, y_pred_)
evaluate_model("Random Forest", y_test, y_pred_rf)

import json

metrics = {
    "Logistic Regression": {
        "Accuracy": accuracy_score(y_test, y_pred_lr),
        "Precision": precision_score(y_test, y_pred_lr),
        "Recall": recall_score(y_test, y_pred_lr),
        "F1-Score": f1_score(y_test, y_pred_lr)
    },
    "XGBoost": {
        "Accuracy": accuracy_score(y_test, y_pred_),
        "Precision": precision_score(y_test, y_pred_),
        "Recall": recall_score(y_test, y_pred_),
        "F1-Score": f1_score(y_test, y_pred_)
    },
    "Random Forest": {
        "Accuracy": accuracy_score(y_test, y_pred_rf),
        "Precision": precision_score(y_test, y_pred_rf),
        "Recall": recall_score(y_test, y_pred_rf),
        "F1-Score": f1_score(y_test, y_pred_rf)
    }
}

with open("model_metrics.json", "w") as f:
    json.dump(metrics, f)